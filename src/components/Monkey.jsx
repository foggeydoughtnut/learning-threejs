/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

const Monkey = (props) => {
  const [hovered, setHovered] = useState(false);
  const ref = useRef(null);

  const { nodes, materials } = useGLTF("/monkey.gltf");

  useFrame((state, delta) => (ref.current.rotation.y += 0.01));


  useEffect(() => {
    if (hovered) {
      nodes.Suzanne.material.color = {
        r: 1,
        g: 0,
        b: 0,
        isColor: true
      }
      nodes.Suzanne.material.emissive = {
        r: 0,
        g: 0,
        b: 0,
        isColor: true
      }
    } else {
      nodes.Suzanne.material.color = {
        r: 0,
        g: 1,
        b: 0,
        isColor: true
      }
      nodes.Suzanne.material.emissive = {
        r: 0,
        g: 0,
        b: 0,
        isColor: true
      }
    }
  }, [hovered])

  return (

    <group {...props} dispose={null}>
      <mesh
        ref={ref}
        castShadow
        receiveShadow
        geometry={nodes.Suzanne.geometry}
        material={nodes.Suzanne.material}
        onPointerOver={(e) => setHovered(true)}
        onPointerOut={(e) => setHovered(false)}
      />
    </group>
  );
}

useGLTF.preload("/monkey.gltf");

export default Monkey;